# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'new.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import subprocess, os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QSlider, QLabel, QFileDialog, QListWidget, QListWidgetItem
from PyQt5.QtCore import Qt, QUrl, QTime
from PyQt5.QtGui import QIcon, QPixmap
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, APIC
import pickle

def get_album_cover(file_path):
    try:
        audio = MP3(file_path, ID3=ID3)
        for tag in audio.tags.values():
            if isinstance(tag, APIC):  # Check if the tag is an image
                cover_data = tag.data  # Get the raw image data
                cover_image = QPixmap()
                cover_image.loadFromData(cover_data)  # Load image data into QPixmap
                return cover_image
    except Exception as e:
        print("Error:", e)
        return None
def showAbout():
        print("Huh?")
        QtWidgets.QMessageBox.information(None, "About us (not much to say)", "SpotiPy v0.1 ALPHA\n(misses crucial features, made in a hurry)\nMade by Haris and Jon\nGitHub: HarisDevelopsAnything/SpotiPy")      
class Playlist:
    def __init__(self, name, songs):
        self.name = name
        self.songs = songs
class Ui_MainWindow(object):
    def __init__(self):
        self.media_player = QMediaPlayer()
        self.media_player.setVolume(50)
        self.media_player.positionChanged.connect(self.update_progress)
        self.media_player.durationChanged.connect(self.update_duration)
    def updatePlaylists(self):
        try:
            with open('playlists.dat', 'rb') as f:
                f.seek(0)
                while True:
                        playlist= pickle.load(f)
                        pn= playlist.name
                        ps= playlist.songs
                        with open(f'playlists/{pn}.playlist', 'w') as file:
                            for i in ps:
                                print(i)
                                file.write(f'{i}\n')
        except Exception as e:
            print(f"Unable to read playlists!\nError message: {e}")
        self.updatePlaylistUI()             
    def updatePlaylistUI(self):
        self.playlists.clear()
        try:
            with open('playlists.dat', 'rb') as f:
                f.seek(0)
                while True:
                    playlist= pickle.load(f)
                    print(playlist)
                    pn= playlist.name
                    print(pn)
                    item= QListWidgetItem(pn)
                    self.playlists.addItem(item)
        except:
            print("Playlist cache updated.")
    def updateSongList(self):
        self.playlist.clear()
        pn= self.playlists.selectedItems()[0].text()
        self.playlist_name.setText(pn)
        print(f"Detected: {pn}")
        try:
            with open(f'playlists/{pn}.playlist', 'r') as f:
                f.seek(0)
                songs= f.readlines()
                print(len(songs))
                for i in songs:
                        self.add_to_playlist(i[0:-1])

        except Exception as e:
            print(e)
    
    def play_music(self):
        if self.media_player.state() == QMediaPlayer.PlayingState:
            self.media_player.pause()
        else:
            try:
                self.media_player.play()
            except:
                QtWidgets.QMessageBox.information("Information", "Error in playing song.\nInstall codecs by going to File>Install codecs\nCodecs by: K-Lite.")

    def pause_music(self):
        self.media_player.pause()

    def previous_music(self):
        print("prev song")
        current_index = self.playlist.currentRow()
        if current_index > 0:
            self.playlist.setCurrentRow(current_index - 1)
            self.play_item(self.playlist.item(current_index - 1))

    def next_music(self):
        print("next song")
        current_index = self.playlist.currentRow()
        if current_index < self.playlist.count() - 1:
            self.playlist.setCurrentRow(current_index + 1)
            self.play_item(self.playlist.item(current_index + 1))

    def change_volume(self):
        print(f"volume {self.volumeSlider.value()}")
        volume = self.volumeSlider.value()
        self.media_player.setVolume(volume)

    def change_progress(self, value):
        self.media_player.setPosition(value)

    def update_progress(self, position):
        duration = self.media_player.duration()
        if duration > 0:
            self.progressBar.setMaximum(duration)
            self.progressBar.setValue(position)
            position_time = QTime(0, (position // 60000) % 60, (position // 1000) % 60)
            duration_time = QTime(0, (duration // 60000) % 60, (duration // 1000) % 60)
            self.timeLabel.setText(f"{position_time.toString('mm:ss')} / {duration_time.toString('mm:ss')}")

    def update_duration(self, duration):
        pass

    def play_item(self, item= "default000"):
        self.songName.setText(self.playlist.currentItem().text())
        if item== "default000":
            item= self.playlist.selectedItems()[0].data(Qt.UserRole)
        file_path = item.data(Qt.UserRole)
        artist = MP3(file_path, ID3=ID3).get("TPE1").text[0] if "TPE1" in MP3(file_path, ID3=ID3) else "Unknown Artist"
        cover_image = get_album_cover(file_path)
        self.coverImage.setPixmap(cover_image)
        self.artistName.setText(artist)
        self.media_player.setMedia(QMediaContent(QUrl.fromLocalFile(file_path)))
        self.media_player.play()

    def add_songs_to_playlist(self):
        file_paths, _ = QFileDialog.getOpenFileNames(self, "Add Songs", "", "Audio Files (*.mp3 *.wav)")
        if file_paths:
            for file_path in file_paths:
                self.add_to_playlist(file_path)

    def add_to_playlist(self, file_path):
        cover_image = get_album_cover(file_path)
        filename = os.path.basename(file_path)
        artist = MP3(file_path, ID3=ID3).get("TPE1").text[0] if "TPE1" in MP3(file_path, ID3=ID3) else "Unknown Artist"
        item = QListWidgetItem(f"{filename} - {artist}")
        if cover_image:
            item.setIcon(QIcon(cover_image))
        self.playlist.addItem(item)
        item.setData(Qt.UserRole, file_path)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1112, 804)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMaximumSize(QtCore.QSize(1112, 804))
        MainWindow.setStyleSheet("background-color: black;\n"
"color: white;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.topBanner = QtWidgets.QFrame(self.centralwidget)
        self.topBanner.setGeometry(QtCore.QRect(320, 0, 801, 361))
        self.topBanner.setStyleSheet("QFrame{\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(0, 211, 0, 255), stop:1 rgba(0, 0, 0, 255));\n"
"}")
        self.topBanner.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.topBanner.setFrameShadow(QtWidgets.QFrame.Raised)
        self.topBanner.setObjectName("topBanner")
        self.playlist_name = QtWidgets.QLabel(self.topBanner)
        self.playlist_name.setGeometry(QtCore.QRect(20, 60, 1000, 67))
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.playlist_name.sizePolicy().hasHeightForWidth())
        self.playlist_name.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        self.playlist_name.setWordWrap(True)
        self.playlist_name.setStyleSheet("QLabel{\n"
"font: 30pt \"Segoe UI Black\";\n"
"padding: 0px;\n"
"background-color: rgba(0,0,0,0);\n"
"width: 1000px;\n"
"}")
        self.playlist_name.setObjectName("playlist_name")
        self.playlist = QtWidgets.QListWidget(self.centralwidget)
        self.playlist.setGeometry(QtCore.QRect(320, 200, 781, 421))
        self.playlist.setStyleSheet("QListWidget{\n"
"background-color: transparent;\n"
"font: 63 18pt \"Segoe UI Semilight\";\n"
"}\n"
"QListWidget::item{\n"
"background-color: rgba(0,0,0,50);\n"
"border-bottom: 1px solid grey;\n"
"border-radius: 0px;\n"
"height: 50px;\n"
"padding: 5px;\n"
"margin: 5px;\n"
"}\n"
"QListWidget::item:hover{\n"
"background-color: rgba(255,255,255,125);\n"
"border: 1px solid green;\n"
"border-radius: 5px;\n"
"height: 70px;\n"
"padding: 5px;\n"
"margin: 5px;\n"
"}\n"
"QListWidget::item:selected{\n"
"color: green;\n"
"background-color: black;\n"
"border-left: 8px solid green;\n"
"border-radius: 0px;    \n"
"font: 25 20pt \"Segoe UI\";\n"
"}\n"
"QScrollBar::handle:vertical{\n"
"border-radius: 2px;\n"
"}\n"
"QScrollBar::")
        self.playlist.setObjectName("playlist")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 70, 301, 551))
        self.frame.setStyleSheet("QFrame{\n"
"background-color: rgba(255,255,255,50);\n"
"border-radius: 10px;\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.playlists = QtWidgets.QListWidget(self.frame)
        self.playlists.itemClicked.connect(lambda: self.updateSongList())
        self.playlists.setGeometry(QtCore.QRect(10, 11, 281, 531))
        self.playlists.setStyleSheet("QListWidget{\n"
"font: 63 20pt \"Segoe UI\";\n"
"}\n"
"QListWidget::item{\n"
"margin: 10px;\n"
"border-radius: 5px;\n"
"width: 100%;\n"
"background-color: rgba(255,255,255, 75);\n"
"}\n"
"QListWidget::item:hover{\n"
"border-left: 4px solid green;\n"
"}\n"
"QListWidget::item:selected{\n"
"border-left: 6px solid green;\n"
"color: green;\n"
"}")
        self.playlist_name_3 = QtWidgets.QLabel(self.centralwidget)
        self.playlist_name_3.setGeometry(QtCore.QRect(10, 0, 171, 61))
        self.playlist_name_3.setStyleSheet("QLabel{\n"
"font: 25pt \"Segoe UI Light\";\n"
"padding: 0px;\n"
"background-color: rgba(0,0,0,0);\n"
"}")
        self.playlist_name_3.setObjectName("playlist_name_3")
        self.addPlaylistButton = QtWidgets.QPushButton(self.centralwidget)
        self.addPlaylistButton.setGeometry(QtCore.QRect(180, 10, 131, 51))
        self.addPlaylistButton.setStyleSheet("QPushButton{\n"
"border: 1px solid green;\n"
"background-color: green;\n"
"font: 12pt \"Segoe UI\";\n"
"padding: 2px;\n"
"}\n"
"QPushButton:hover{\n"
"background-color: darkgreen;\n"
"}")
        self.addPlaylistButton.setObjectName("addPlaylistButton")
        self.addPlaylistButton.clicked.connect(lambda: self.addPlaylist())
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(10, 630, 1091, 121))
        self.frame_2.setStyleSheet("QFrame{\n"
"background-color: rgb(83, 83, 83);\n"
"border-radius: 10px;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.coverImage = QtWidgets.QLabel(self.frame_2)
        self.coverImage.setGeometry(QtCore.QRect(10, -2, 38, 121))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.coverImage.sizePolicy().hasHeightForWidth())
        self.coverImage.setSizePolicy(sizePolicy)
        self.coverImage.setStyleSheet("QLabel{\n"
"background-color: white;\n"
"border-radius: 0px;\n"
"height: 20px;\n"
"width: 80px;\n"
"}")
        self.coverImage.setObjectName("coverImage")
        self.frame1 = QtWidgets.QFrame(self.frame_2)
        self.frame1.setGeometry(QtCore.QRect(50, -2, 141, 121))
        self.frame1.setObjectName("frame1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame1)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.verticalLayout.setObjectName("verticalLayout")
        self.songName = QtWidgets.QLabel(self.frame1)
        self.songName.setStyleSheet("QLabel{\n"
"font: 15pt \"Segoe UI Light\";\n"
"padding: 0px;\n"
"background-color: rgba(0,0,0,0);\n"
"}")
        self.songName.setObjectName("songName")
        self.verticalLayout.addWidget(self.songName)
        self.artistName = QtWidgets.QLabel(self.frame1)
        self.artistName.setStyleSheet("QLabel{\n"
"font: 10pt \"Segoe UI Semibold\";\n"
"padding: 0px;\n"
"background-color: rgba(0,0,0,0);\n"
"}")
        self.artistName.setObjectName("artistName")
        self.verticalLayout.addWidget(self.artistName)
        self.prevSongButton = QtWidgets.QPushButton(self.frame_2)
        self.prevSongButton.setGeometry(QtCore.QRect(480, 60, 51, 50))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.prevSongButton.sizePolicy().hasHeightForWidth())
        self.prevSongButton.setSizePolicy(sizePolicy)
        self.prevSongButton.setStyleSheet("QPushButton{\n"
"height: 50%;\n"
"border-radius: 25%;\n"
"font: 20pt \"Segoe Fluent Icons\";\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(255,255,255,50);\n"
"}")
        self.prevSongButton.setObjectName("prevSongButton")
        self.prevSongButton.clicked.connect(lambda: self.previous_music())
        self.playPauseButton = QtWidgets.QPushButton(self.frame_2)
        self.playPauseButton.clicked.connect(lambda: self.play_music())
        self.playPauseButton.setGeometry(QtCore.QRect(540, 60, 51, 50))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.playPauseButton.sizePolicy().hasHeightForWidth())
        self.playPauseButton.setSizePolicy(sizePolicy)
        self.playPauseButton.setStyleSheet("QPushButton{\n"
"height: 50%;\n"
"border-radius: 25%;\n"
"    font: 20pt \"Segoe UI Symbol\";\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(255,255,255,50);\n"
"}")
        self.playPauseButton.setObjectName("playPauseButton")
        self.nextSongButton = QtWidgets.QPushButton(self.frame_2)
        self.nextSongButton.setGeometry(QtCore.QRect(600, 60, 51, 50))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nextSongButton.sizePolicy().hasHeightForWidth())
        self.nextSongButton.setSizePolicy(sizePolicy)
        self.nextSongButton.setStyleSheet("QPushButton{\n"
"height: 50%;\n"
"border-radius: 25%;\n"
"    font: 20pt \"Segoe Fluent Icons\";\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(255,255,255,50);\n"
"}")
        self.nextSongButton.setObjectName("nextSongButton")
        self.nextSongButton.clicked.connect(lambda: self.next_music())
        self.volumeSlider = QtWidgets.QSlider(self.frame_2)
        self.volumeSlider.setGeometry(QtCore.QRect(950, 20, 121, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.volumeSlider.sizePolicy().hasHeightForWidth())
        self.volumeSlider.setSizePolicy(sizePolicy)
        self.volumeSlider.setStyleSheet("QSlider{\n"
"background-color: None;\n"
"}\n"
"QSlider::groove:horizontal {\n"
"    border-radius: 1px;\n"
"    height: 10px;\n"
"    margin: 0px;\n"
"    background-color: rgb(52, 59, 72);\n"
"}\n"
"QSlider::groove:horizontal:hover {\n"
"    background-color: rgb(55, 62, 76);\n"
"}\n"
"QSlider::handle:horizontal {\n"
"    background-color: rgb(255, 255, 255);\n"
"    border: none;\n"
"    height: 40px;\n"
"    width: 20px;\n"
"    margin: 0;\n"
"    border-radius: 10px;\n"
"    padding: -20px 0px;\n"
"}\n"
"QSlider::handle:horizontal:hover {\n"
"    background-color: rgb(155, 180, 255);\n"
"}\n"
"QSlider::handle:horizontal:pressed {\n"
"    background-color: rgb(65, 255, 195);\n"
"}")
        self.volumeSlider.setOrientation(QtCore.Qt.Horizontal)
        self.volumeSlider.setObjectName("volumeSlider")
        self.volumeSlider.setRange(0, 100)
        self.volumeSlider.setToolTip("Volume")
        self.volumeSlider.valueChanged.connect(lambda: self.change_volume())
        self.progressBar = QtWidgets.QSlider(self.frame_2)
        self.progressBar.setGeometry(QtCore.QRect(260, 20, 651, 20))
        self.progressBar.setStyleSheet("QSlider{\n"
"background-color: transparent;\n"
"}")
        self.progressBar.setOrientation(QtCore.Qt.Horizontal)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.sliderMoved.connect(self.change_progress)
        self.timeLabel = QtWidgets.QLabel(self.frame_2)
        self.timeLabel.setGeometry(QtCore.QRect(200, 10, 41, 41))
        self.timeLabel.setStyleSheet("QLabel{\n"
"font: 10pt \"Segoe UI Semibold\";\n"
"padding: 0px;\n"
"background-color: rgba(0,0,0,0);\n"
"}")
        self.timeLabel.setObjectName("timeLabel")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1112, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_folder.setObjectName("actionOpen_folder")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionOpen_folder)
        self.menubar.addAction(self.menuFile.menuAction())
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.menuFile.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def addPlaylist(self):
        try:
            subprocess.run("python playlist.py", shell=True)
            self.updatePlaylists()
        except:
            QtWidgets.QMessageBox.warning(None, "Error", "Playlist creation unsuccessful.")
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.playlist_name.setText(_translate("MainWindow", "Local music"))
        self.playlist.itemDoubleClicked.connect(self.play_item)
        __sortingEnabled = self.playlists.isSortingEnabled()
        self.playlists.setSortingEnabled(__sortingEnabled)
        self.updatePlaylists()
        self.playlist_name_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">|</span> playlists</p></body></html>"))
        self.addPlaylistButton.setToolTip(_translate("MainWindow", "Create new..."))
        self.addPlaylistButton.setText(_translate("MainWindow", "Add new +"))
        self.coverImage.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">album</span></p></body></html>"))
        self.songName.setText(_translate("MainWindow", "song name"))
        self.artistName.setText(_translate("MainWindow", "artist"))
        self.prevSongButton.setText(_translate("MainWindow", "<"))
        self.playPauseButton.setText(_translate("MainWindow", "⏯"))
        self.nextSongButton.setText(_translate("MainWindow", ">"))
        self.timeLabel.setText(_translate("MainWindow", "00:00"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen.setText(_translate("MainWindow", "Install codecs"))
        self.actionOpen.triggered.connect(lambda: subprocess.Popen('klite.exe'))
        self.actionAbout.triggered.connect(lambda: showAbout())
        self.actionAbout.setText("About")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
